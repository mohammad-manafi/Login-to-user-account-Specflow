// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AccountManagement.Tests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("User Login To Account", SourceFile="Features\\UserLogin.feature", SourceLine=0)]
    public partial class UserLoginToAccountFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "UserLogin.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "User Login To Account", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void UserCanLoginToAccount(string username, string password, string email, string result, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("username", username);
            argumentsOfScenario.Add("password", password);
            argumentsOfScenario.Add("email", email);
            argumentsOfScenario.Add("result", result);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("User Can Login To Account", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given(string.Format("i am {0} with password {1} and {2}", username, password, email), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "username",
                            "password"});
                table1.AddRow(new string[] {
                            "Mohamamd manafi",
                            "1996"});
                table1.AddRow(new string[] {
                            "ali sedighi",
                            "1995"});
#line 8
 testRunner.And("the following users are already available", ((string)(null)), table1, "And ");
#line hidden
#line 12
 testRunner.When("i try to login to my account", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 13
 testRunner.Then(string.Format("i should get message {0}", result), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User Can Login To Account, Mohamamd manafi", SourceLine=16)]
        public virtual void UserCanLoginToAccount_MohamamdManafi()
        {
#line 6
this.UserCanLoginToAccount("Mohamamd manafi", "1996", "mohammad1996.manafi@gmail.com", "Authenticated", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User Can Login To Account, ali sedighi", SourceLine=16)]
        public virtual void UserCanLoginToAccount_AliSedighi()
        {
#line 6
this.UserCanLoginToAccount("ali sedighi", "1995", "ali.sedighi@gmail.com", "Authenticated", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User Can Login To Account, fatemeh karimi", SourceLine=16)]
        public virtual void UserCanLoginToAccount_FatemehKarimi()
        {
#line 6
this.UserCanLoginToAccount("fatemeh karimi", "1997", "fatemeh.karimi@gmail.com", "Access Deny", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User Can Login To Account, huma samiee", SourceLine=16)]
        public virtual void UserCanLoginToAccount_HumaSamiee()
        {
#line 6
this.UserCanLoginToAccount("huma samiee", "1234", "huma.samiee@gmail.com", "Access Deny", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User Can Login To Account, pouria gholami", SourceLine=16)]
        public virtual void UserCanLoginToAccount_PouriaGholami()
        {
#line 6
this.UserCanLoginToAccount("pouria gholami", "1997", "pouria.gholami@gmail.com", "Access Deny", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("User Can Login To Account, alireza Afra", SourceLine=16)]
        public virtual void UserCanLoginToAccount_AlirezaAfra()
        {
#line 6
this.UserCanLoginToAccount("alireza Afra", "1995", "alireza.Afra@gmail.com", "Access Deny", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
